<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459931992092">{:repl-history {:ide [], :local [&quot;(test-project.core/foo 5)&quot; &quot;(require '[test-project.core :as c])&quot; &quot;(c/foo \&quot;Hello\&quot;)&quot; &quot;(def x [1 2 3 4])&quot; &quot;(defn foo\n  \&quot;I don't do a whole lot.\&quot;\n  [x]\n  (println x \&quot;Hello, Bill\&quot;))&quot; &quot;(defn foo\n  \&quot;I don't do a whole lot.\&quot;\n  [x]\n  (println x \&quot;Hello, Bl\&quot;))&quot; &quot;(ns test-project.core)&quot; &quot;(foo :df)&quot; &quot;(foo :afasd)&quot; &quot;(c/foo x)&quot; &quot;(ns user)&quot; &quot;x&quot; &quot;(defn evna\n  [alpha]\n  (fn [d m] (+ (* alpha d) (* (- 1 alpha) m))))&quot; &quot;(doc eval)&quot; &quot;(all-ns [doc])&quot; &quot;(all-ns [reduce])&quot; &quot;(doc all-ns)&quot; &quot;(all-ns [])&quot; &quot;(+ 3 4)&quot; &quot;(+ 3 40)&quot; &quot;(doc *1)&quot; &quot;(println 3)&quot; &quot;(println 30)&quot; &quot;*3&quot; &quot;1&quot; &quot;3&quot; &quot;4&quot; &quot;(doc *2)&quot; &quot;(doc print 5)&quot; &quot;(print 5)&quot; &quot;*1&quot; &quot;*2&quot; &quot;(doc reductions)&quot;], :remote [&quot;(ns withered-volcano\n    (:require [gorilla-plot.core :as plot]\n              [test-project.core :as c]))&quot; &quot;(def d (take 100 (repeatedly rand)))&quot; &quot;(def pl (plot/list-plot d :joined true :color :black))&quot; &quot;(def sd (reductions (c/evna 0.1) d))&quot; &quot;(plot/compose\n  pl\n  (plot/list-plot sd :joined true :color :green))&quot; &quot;(def x [5 4 3 4 5 4])&quot; &quot;whithered-volcano/y&quot; &quot;withered-volcano/y&quot; &quot;withered-volcano/pl&quot; &quot;(defn evna\n  [alpha]\n  (fn [d m] (+ (* alpha d) (* (- 1 alpha) m))))&quot; &quot;test-project.core/evna&quot; &quot;3&quot; &quot;(def b 3)&quot; &quot;test-project.core/b&quot; &quot;(ns test-project.core)&quot; &quot;evna&quot; &quot;(def ddd :adfd)&quot; &quot;(doc ns)&quot; &quot;(all ns)&quot; &quot;(all-ns)&quot; &quot;inc&quot; &quot;(ns-imports *ns*)&quot; &quot;*ns*&quot; &quot;(def x 3)&quot; &quot;(ns-interns gorilla-repl-session)&quot; &quot;(ns-interns 'gorilla-repl-session)&quot; &quot;(ns-interns *ns*)&quot; &quot;(ns-map *ns*)&quot; &quot;(ns 'gggg)&quot; &quot;(ns gggg)&quot; &quot;(ns gorilla-repl-session\n    (:require [gorilla-plot.core :as plot]\n              [test-project.core :as c]))&quot; &quot;(c/evna 0.3)&quot; &quot;(def bb 5)&quot; &quot;bb&quot; &quot;; load gorill-repl-session&quot; &quot;c/evna&quot; &quot;(clojure.repl/dir c/evna)&quot; &quot;(clojure.repl/dir c)&quot; &quot;(clojure.repl/dir 'gorilla-repl-session)&quot; &quot;(clojure.repl/dir gorilla-repl-session)&quot; &quot;(clojure.repl/dir test-project.core)&quot;]}}</component>
</project>